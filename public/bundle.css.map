{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../ResultTable.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Link from \"./Link.svelte\";\n  import { onDestroy, beforeUpdate, afterUpdate } from 'svelte';\n  import { writable, get as getStoreValue } from 'svelte/store';\n  import { asRow, normalizeLink, getLink } from \"./controls\";\n  import debounce from \"debounce\";\n\n  export let definition;\n  export let controls;\n\n  export let result;\n  export let inPopup;\n  export let pick;\n  export let showDownloads;\n\n  const id = inPopup ? \"in-popup-results\" : \"out-popup-results\";\n\n  function syncTable() {\n\n    function resetStylesheet() {\n      const stylesheet = document.getElementById(id + \"-style\").sheet;\n      for (let i = 0; i < stylesheet.rules.length; i++) {\n        stylesheet.removeRule(0);\n      }\n      return stylesheet;\n    }\n\n    const stylesheet = resetStylesheet();\n\n    const requiredWidth = document.getElementById(\"code-input-area\") ?\n      document.getElementById(\"code-input-area\").getBoundingClientRect().width :\n      640;\n\n    stylesheet.insertRule(`#table-holder { min-width: ${requiredWidth}px }`);\n  }\n\n  function alignment(field) {\n    if (\n      (field.type.indexOf(\"text\") > -1) ||\n      (field.type.indexOf(\"char\") > -1) ||\n      (field.type.indexOf(\"date\") > -1) ||\n      (field.type.indexOf(\"time\") > -1) ||\n      (field.type.indexOf(\"jsonb\") > -1)\n    ) {\n      return \"left\";\n    }\n    return \"right\";\n  }\n\n  const dateFormatter = new Intl.DateTimeFormat(window.navigator.language, { year: 'numeric', month: '2-digit', day: '2-digit' });\n  const timestampFormatter = new Intl.DateTimeFormat(window.navigator.language, { hour: 'numeric', minute: 'numeric', second: 'numeric', year: 'numeric', month: '2-digit', day: '2-digit' });\n  const formatters = {\n    \"date\": (s) => dateFormatter.format(new Date(s)),\n    \"timestamp\": (s) => timestampFormatter.format(new Date(s)),\n    \"jsonb\": (s) => JSON.stringify(s),\n  }\n\n  function getFormatter(sqlType) {\n    if (formatters.hasOwnProperty(sqlType)) {\n      return formatters[sqlType];\n    }\n    return null;\n  }\n\n\n  let args = [];\n\n  function getValuesFromControls(currentControls) {\n    return Object.getOwnPropertyNames(currentControls || {}).map(\n      (name) => {\n        return { name: name, val: currentControls[name].value }\n      }\n    )\n  }\n\n  function getValuesFromResults(currentResults) {\n    if (!currentResults || !currentResults.rows || !currentResults.rows.length) {\n      return [];\n    }\n    return currentResults.fields.map((fld, i) => {\n      return { name: fld.name, val: currentResults.rows[0][i] };\n    });\n  }\n\n  $: args = getValuesFromControls(controls).concat(getValuesFromResults(result));\n\n\n  function getFieldnames(myArgs) {\n    return myArgs.map(({name}) => name).concat(\n      (result && result.fields) ? (result.fields || []).map(({name}) => name) : []\n    );\n  }\n\n  afterUpdate(syncTable);\n  window.onresize = debounce(syncTable, 200);\n</script>\n<style>\n  #table-holder {\n    max-height: 400px;\n    overflow-y: scroll;\n  }\n  #table-holder table th {\n    position: sticky;\n    top: 0;\n    z-index: 2;\n    background-color: #dadee4;\n  }\n</style>\n<div id={id}>\n  <style id={ id + \"-style\" }>\n  </style>\n  {#if result && ((result.status == \"complete\") || (result.status == \"preview\"))}\n  <div class=\"columns\">\n    <div class=\"column col-auto\" style=\"margin: 0 auto\">\n      <div id=\"table-holder\">\n      <table class=\"results-head table table-striped table-hover\" style=\"padding-bottom: 0; margin: 0\">\n        <thead>\n          <tr>\n            {#each result.fields as field}\n            <th style={ \"text-align: \" + alignment(field) }>{field.name}</th>\n            {/each}\n            {#if (definition.row_links && definition.row_links.length) || inPopup}\n            <th></th>\n            {/if}\n          </tr>\n        </thead>\n        <tbody>\n          {#each result.rows || [] as row}\n          <tr>\n            {#each row as cell, i}\n            <td style={ \"text-align: \" + alignment(result.fields[i]) } data-field-name={ result.fields[i].name }>\n              {#if cell === null}\n              NULL\n              {:else if getFormatter(result.fields[i].type)}\n              { getFormatter(result.fields[i].type)(cell) }\n              {:else}\n              {cell}\n              {/if}\n            </td>\n            {/each}\n            {#if (definition.row_links && definition.row_links.length) || inPopup}\n            {#if inPopup}\n            <td style=\"text-align: center\">\n              <button class=\"btn btn-link\" on:click={c => pick(row)}>Pick</button>\n            </td>\n            {:else}\n            <td style=\"text-align: left\">\n              {#each definition.row_links  || [] as link}\n              <Link link={getLink(normalizeLink(getFieldnames(args), link), asRow(row, result.fields, args)) }/>\n              {/each}\n            </td>\n            {/if}\n            {/if}\n          </tr>\n          {/each}\n        </tbody>\n      </table>\n      </div>\n      {#if inPopup}\n        {#if !result.full_data_set }\n        <div class=\"toast toast-warning toast-resultset-warning\">\n          ⚠ The result set is very large and not all results are shown.\n        </div>\n        {/if}\n      {:else if !result.full_data_set }\n        <div class=\"toast toast-warning toast-resultset-warning\" >\n          ⚠ Warning: This result set is very large and not all are shown. If you want to see the full results you will have to <a href=\"#show-downloads\" on:click|preventDefault={showDownloads}>download them</a>.\n        </div>\n      {:else}\n        <div class=\"toast toast-success toast-resultset-warning\">\n          All the results are showing but you can still <a href=\"#show-downloads\" on:click|preventDefault={showDownloads}>download the results</a>.\n        </div>\n      {/if}\n    </div>\n  </div>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAiGE,aAAa,4BAAC,CAAC,AACb,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,2BAAa,CAAC,KAAK,CAAC,EAAE,cAAC,CAAC,AACtB,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,CAAC,CACN,OAAO,CAAE,CAAC,CACV,gBAAgB,CAAE,OAAO,AAC3B,CAAC"
}